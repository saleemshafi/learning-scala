package rosalind

import org.scalatest.FunSuite
import rosalind._
import rosalind.FixedDecimal._
import rosalind.spectrometry._
import rosalind.spectrometry.Protein._

class SpectrometryTestSuite extends FunSuite {
  def getSpectrum(d: String): Spectrum =
    d.split(" ") map (_ toFixedDecimal)

  test("PRTM: protein mass with real data") {
    val protein = "QLEVNAACNSAHEIHWCCSGSQCLKMREKMLTGAEDGRHQEHCDPPSSFRHSRMCMPEIDQTVQCLWNCFAQCANSIGAKYLCMEEVQRPSIWMATGDNPRFYYTIGAYWCACGGCCALCLCPNMEAKSCCCNHWHKHEIYYGCIYNWDPQENLTHGTWEFTMHDAMLDMWRSQRLAWVAHSNFAVDCRQPPRPYRWFNAKTEVFLNTQEMKCLRWMEDCPLFYWHAPPGETYGDSIGDPMMYQENQALEMFFCRHCIHFCVWLCENDTVSTMNRVKEQAKYAKGHPQAMDCAPNKPHEQHMQMRIVRPCLSKSCSVRARPRTVVGCRKFFVFPTQDKCYMCHCKEREYMSALMWRPMIPLALICPAYVQFVNWQHCDYTWCGVDNIDLNSEELFDRFGAFINSGQWDDCKDTLLSPAKRTYVAKNHERIVFNHKRQPKHDMLLLFNMPTMHQPYWYTCMQYWADWTAKFIQHARSCESKEPYWNSSRMYVWKSFICCEPTVRQFDQYHGLWKNFFMGEHHLSMAKDVQFLWNQHCMPVLCWVMHAHVRICANIIFVEFCMEQCNANWRRLWINFCNKDIQDHANDENQNIMDMICIGFAMIEFDQEWIHSIEHCSWQDVRDEKIAKCMTMKIAYWEDISHLRNLPIPHEMAMYEECTEKQCYNAKPFLIFCAGMHWCERYIPIYNVQHDNDTYTWRQFDILKENPGNQIEQKACWPGKECETTRWRPFYDDYSIKYCQDKRNPFRYSYRHVWTLICCHRGAWHWDDEEPSGGPDDVHEFSTCYTEGYPTYRLATDTVKGYRYPHDSTVASVWERFQLPRIKMGSRMIPGIMEGKRQTLRAQSGPIGGFSEAKALFIYCVDHDKGSASFEICQFWRAETWPASEQMAMFAGHHWCATYHQANRAWMITMNFFADSNCETRIRDMKEGFML"
    expect("110439.56678".toFixedDecimal) { protein mass }
  }

  test("SPEC: infer from spectrum with real data") {

    val prefixSpectrum = """4104.04731618
4201.10007618
4304.10926618
4391.14129618
4522.18178618
4650.27674618
4797.34515618
4912.37209618
4999.40412618
5098.47253618
5261.53586618
5318.55732618
5481.62065618
5610.66324618
5747.72215618
5804.74361618
5918.78654618
5975.80800618
6089.85093618
6236.91934618
6323.95137618
6454.99186618
6570.01880618
6756.09811618
6853.15087618
6968.17781618
7065.23057618
7193.32553618
7264.36264618
7450.44195618
7581.48244618
7710.52503618
7823.60909618
7926.61828618
8112.69759618
8226.74052618
8357.78101618
8488.82150618
8587.88991618
8715.94849618
8772.96995618
8874.01763618
9005.05812618
9136.09861618
9235.16702618
9421.24633618
9534.33039618
9690.43150618
9791.47918618
9938.54759618
10094.6487062
10222.7072862
10378.8083962
10509.8488862
10665.9499962
10780.9769362
10912.0174262
11025.1014862
11096.1385962
11195.2070062
11308.2910662
11407.3594762
11535.4180562
11721.4973662
11884.5606962
11971.5927262
12134.6560562
12249.6829962
12352.6921862
12508.7932962
12611.8024862
12682.8395962
12796.8825262
12924.9774862
12996.0145962
13053.0360562
13209.1371662
13322.2212262
13437.2481662
13623.3274762
13754.3679662
13882.4265462
13983.4742262
14096.5582862
14183.5903162
14339.6914262
14525.7707362
14656.8112262
14769.8952862
14906.9541962
15006.0226062""".split("\r\n") map (_.toFixedDecimal)
    expect("PCSMKFDSVYGYEHGNGNFSMDWPDPKAWMELCWNMMVQGTMMVWLRTFRQRMRDMLAVLVQWYSYDCRCANKAGRLDWMQTLSRWMLHV".toProtein) {
      Protein.fromSpectrum(prefixSpectrum)
    }
  }

  test("CONV: spectral convolution with data from problem") {
    val multiSet1 = getSpectrum("186.07931 287.12699 548.20532 580.18077 681.22845 706.27446 782.27613 968.35544 968.35544")
    val multiSet2 = getSpectrum("101.04768 158.06914 202.09536 318.09979 419.14747 463.17369")
    val diff = maxOccurring(minkowskiDifference(multiSet1, multiSet2))
    expect((BigDecimal.apply("85.03163"), 3)) { diff }
  }

  test("CONV: spectral convolution with real data set") {
    val multiSet1 = getSpectrum("128.09496 244.12455 314.17427 347.13374 486.22267 533.21305 620.24508 677.26654 1160.49944 1219.59856 1273.5835 1356.65747 1401.67846 1472.71557 1791.88048 1928.93939 1990.95794 2028.0078 2128.01685 2244.08242 2341.13518 2445.13665 2454.21924 2638.34041 2661.2299 2808.44593 3049.4257 3052.51546 3106.44716 3295.60098 3480.68102 3611.72151 3767.7763 3914.84471 4029.87165 4048.98531 4143.91458 4186.04422 4402.13747 4493.05722 4503.18515 4606.14128 4719.22534 4820.30495 5175.51566 5266.43541 5361.59497 5369.4446 5482.52866 5619.58757 5753.72817 5846.71455 6347.99398 6372.9719 6461.07804 6619.14718 6706.17921 6745.10001 6860.12695 6894.25892 6973.21101 7007.34298 7101.26958 7214.35364 7424.49046 7511.52249 7640.56508 7677.61494 8195.85731 8240.8783 8266.89442 8311.91541 8605.1262 8775.23172 8890.25866 8991.30634 9069.26615 9354.39861 9540.47792 9555.48882 9668.57288 9668.57288")
    val multiSet2 = getSpectrum("57.02146 131.04049 381.18346 662.30239 790.39735 972.42108 998.49337 1085.50514 1111.57743 1301.59839 1402.64607 1489.6781 1576.71013 1814.88121 1950.87252 2025.01803 2266.16066 2295.06073 2442.12914 2557.15608 2671.19901 2834.26234 2866.39977 3020.34165 3182.5203 3279.57306 3520.71569 3561.63167 3793.71984 3869.92707 3896.72903 4009.81309 4073.98394 4146.872 4205.02443 4245.94041 4391.10374 4487.08304 4584.1358 4633.23039 4715.17629 4900.25633 4932.39376 5095.45709 5143.34185 5209.50002 5471.59537 5500.49544 5584.67943 5741.63807 5918.79277 6189.94597 6266.91792 6655.07867 6681.15096 6768.16273 6839.19984 6925.27551 7218.39664 7385.47264 7433.48725 7709.63464 7766.6561")
    val diff = maxOccurring(minkowskiDifference(multiSet1, multiSet2))
    expect((BigDecimal.apply("1472.71557"), 16)) { diff }
  }

  test("FULL: infer peptide from full spectrum with data from problem") {
    val masses =
      """1988.21104821
610.391039105
738.485999105
766.492149105
863.544909105
867.528589105
992.587499105
995.623549105
1120.6824591
1124.6661391
1221.7188991
1249.7250491
1377.8200091""".split("\r\n") map (a => a.toFixedDecimal)
    expect("KEKEP".toProtein) { Protein.fromFullSpectrum(masses.tail) }
  }

  test("FULL: infer peptide from full spectrum with real data") {
    val masses =
      """17767.0171215
3761.64497576
3862.69265576
3898.70388576
3999.75156576
4027.74647576
4128.79415576
4155.80505576
4243.82109576
4252.85781576
4372.86368576
4438.93712576
4509.92259576
4509.97423576
4609.04264576
4610.97027576
4724.06958576
4748.02918576
4887.13291576
4895.09759576
5001.17584576
5008.18165576
5130.21843576
5171.24498576
5231.26611576
5300.28757576
5332.31379576
5371.32468576
5433.36147576
5485.36761576
5580.42988576
5598.45167576
5637.45134576
5669.48878576
5766.49393576
5772.49797576
5837.53104576
5859.53000576
5936.59945576
6022.59333576
6035.66786576
6178.69444576
6182.73627576
6253.77338576
6291.77850576
6367.81631576
6419.87346576
6466.88472576
6476.89492576
6537.92183576
6563.92695576
6666.01679576
6666.93614576
6780.02020576
6794.11175576
6943.08353576
6957.17508576
7099.18464576
7113.27619576
7210.32895576
7255.28575576
7313.33814576
7369.32868576
7441.39672576
7484.35562576
7583.42403576
7588.46513576
7640.44549576
7719.50562576
7743.45468576
7776.52708576
7844.50236576
7962.60639576
8007.56569576
8093.64688576
8154.63410576
8194.69456576
8251.71602576
8267.71816576
8382.74510576
8388.77493576
8511.78769576
8525.83384576
8642.82818576
8653.92880576
8743.87586576
8767.97173576
8842.94427576
8924.07284576
8999.04538576
9023.14125576
9113.08831576
9124.18893576
9241.18327576
9255.22942576
9378.24218576
9384.27201576
9499.29895576
9515.30109576
9572.32255576
9612.38301576
9673.37023576
9759.45142576
9804.41072576
9922.51475576
9990.49003576
10023.5624358
10047.5114958
10126.5716258
10178.5519858
10183.5930858
10282.6614958
10325.6203958
10397.6884358
10453.6789758
10511.7313658
10556.6881658
10653.7409258
10667.8324758
10809.8420358
10823.9335858
10972.9053658
10986.9969158
11100.0809758
11101.0003258
11203.0901658
11229.0952858
11290.1221958
11300.1323958
11347.1436558
11399.2008058
11475.2386158
11513.2437358
11584.2808458
11588.3226758
11731.3492558
11744.4237858
11830.4176658
11907.4871158
11929.4860758
11994.5191458
12000.5231858
12097.5283358
12129.5657758
12168.5654458
12186.5872358
12281.6495058
12333.6556458
12395.6924358
12434.7033258
12466.7295458
12535.7510058
12595.7721358
12636.7986858
12758.8354658
12765.8412758
12871.9195258
12879.8842058
13018.9879358
13042.9475358
13156.0468458
13157.9744758
13257.0428858
13257.0945258
13328.0799958
13394.1534358
13514.1593058
13523.1960258
13611.2120658
13638.2229658
13739.2706458
13767.2655558
13868.3132358
13904.3244658
14005.3721458""".split("\r\n") map (a => a.toFixedDecimal)

    expect("THEDEHTHFLYEANLACSYRLKGSCLYRRNDVGCTYFLDEMTVRNKHHGTMWGMFQCPRYKKAVNAFVVAEGFTTTENYDVAWPQE".toProtein) {
      Protein.fromFullSpectrum(masses.tail)
    }
  }

  def findMatchingProtein(R: Spectrum, proteins: Set[Protein]): (Protein, Int) = {
    (for (
      prot <- proteins.toList;
      spectrumS = prot.completeSpectrum;
      diff = minkowskiDifference(R, spectrumS);
      (_, occurrences) = maxOccurring(diff)
    ) yield (prot, occurrences)) maxBy (a => a._2)
  }

  test("PRSM: matching a spectrum to a protein with data from problem") {
    val proteinData =
      """4
IASWMQS
GSDMQS
VWICN
PVSMGAD""".split("\r\n")
    val spectrumData =
      """445.17838
115.02694
186.07931
314.13789
317.1198
215.09061
""".split("\r\n")
    val proteins = proteinData.tail.map((p: String) => new Protein(p)).toSet
    val spectrum = (spectrumData map (_ toFixedDecimal))

    val (protein, count) = findMatchingProtein(spectrum, proteins)
    expect(("IASWMQS".toProtein, 3)) { (protein, count) }
  }

  test("PRSM: matching a spectrum to a protein with real data set") {
    val proteinData =
      """20
LAGKLHSHGCRWTCDFALNCTAGFQVKGYWVYTAIRLKIVMMEQDAESHEYTFPLSCDPVRVWDADTPTMESHIALAENIQTQCCIMRGWCNNLPSMENIQVQLSSMEMPIGNGKERDE
VKFCQHGSAASSNHIRKHGHAYVAKGWSLVWWEYFWRIEICFEVFKNTKTQFNMYGEWHDNLNWMRNHPTRFMPPGIDLQWIEVGASHTNKSIAHVCKVGHSNFKWVGHPWYGCMVRVEFCHHVDFRRMWGYDWDKMLSFIKM
NWVCLKNEIFMIAVYLYCPSQWFERFGSNCSLCWIDIQEHENRHRWSLQFHDNYYVADTITHKPVCQEIGAHLILECWWGRWKIQDRAKPMLECVYRMILCVAYFKSKPDSMAAWCRRGEGAPPWEA
AMWTCQVVQHLGPYQECTIWHYQNKLCQGSGGVSFHYVMNAAAHYCDQSASEVQITMQEYKGPVEHHIDFCMYDAEWGINNGFRVFRMHEYHKQDNTRVIIQDSLGGSMDGDWPVHNYYRISTAHRTLFGGDKPFH
LIIQNRVADVGNYKGDLNRGVAWHNHCNSASPSNHSHFHHAGAEFKLEQMDCYIIETINGFCEVYSPTMSDEAMERFLVDQHHLHCNHLQLSISCWVLIIFPCFNKYNAMMCVPEHPKKAGDIMMILLARYK
CRANRIGLELQDCVKHAPGWIWVFWLGFYPRPYSYKCRNFHEPIEATRNMIISSMRLNSTCHPNSDFYQYHSTSRTPMHKGYMLGYDGPKDRDSLLKLVYIKYHCRMAFWKALSYWAYPRRWDDSTNCVFMGRIGWP
THDNKHTIQEYPEHQYSSLGYFYLYAIKTENEIGHRHVMQPAFDLVDGAQRRKWFLFLTKCQDVRMDAYPYPKRGSQLGDSEVICYTQGNSTHMKHEGMDHQTILKDSEWGMIRAFNKGIDDTKKRESWQISF
DAYRLCEHNDYKVIRATVVMARQSWARICCMTGKWVGTERIFSNIKMAYRRVGPWYCTYFDLLEAMYKNTNVASIEIEINLTAPATQLDVPGETYVGHTMQHACYLLSETSIMHVSVKKRIDSMTAERWWFDGISR
SQEGMADHIITQSFNIQEDPEMCHNYVMMEKINCKHECIQQFDVDRGCTHSQTCLARVCNCRECDIQYLQWCGEDAIGGWLRLSTYSEKMDLILPNMREDVWTRRLCCANWVNSFLAEYHGAQVTQCHHQF
SGVVASGSKLIGKNPWADGAHAVGIHNRTCPAWHMFGVIGKQNVPYAMMNGANFNIGSLNCHVKNITVLAIWISYQEPIAAPAESYPGPWPAVFFHNNWAQALLSQQGISLIINTAARIPKKQDGPW
EHEHNPVVYQPMFDELEPSKKCFRVNEANPWWMCSYSMVNRTLCHWRMAEYICCCHESEYFNFNQHTFRNWMYEFTITVTWACANVANPYNYCCATSTTMYAQIDYSICFCTFLPHWKASNTEGTTIQFHRAYGSYASSN
VRKDYDNYRHFRGSVYASENASSDKRVAAPEALPFTVQTASLWACWSYEDYGEYIMPSSDFCRQELFWQINTTNFKPPNIIVMKKDWHPHGGCTCPSDFDIGCICFVANFTFPCTVMGHE
CKCEVTQGMIYRGSPQGLVIGIGKCIDFNHCWIRAFVERWCIALKNPARYDSRSCRVFGMLFNFEKMNDSVKCPLTSLNSLAGLSWQRCNQKEDGANAHPAAYHCKPFDQEYVIKTA
LPFNTKQSVLFRVDWKVDRILQAIATCTISDVMIWVQSHYSLNGYSTVCAEAMWQGRGNTFHWWMKFVPQARYCAFLNTDMRPRREDETFTLSFWMEHTWNHWPWFMWVCFRSAMQPPKEILRYSTLFLGEWWED
CYEPAIVSCVSFFKDHADFLYMMSSSNTFARGKDMWRKGPTNREIFYVGCMCKCSACRGMAFKMACLVHGTHAWIWDVQFPCLKKILVNIAMAGQAWKLNLKRMQYTVEYDNVGTGKFTMVKAGGIEDMTVCIPMFHTL
HGYWLSLIMGEKTGKDCIEGLYSYLHYCVIWCGFHLWTVQQYFIQHQIHIQRMSIGQYVVNVYTMPYKRNFPFRRGCDMQFWYAVSLLFDKCTADSFILGKMALWIGVSDFRHQEPTTMEIL
KSDKCPHKQFYYSCDTSIFKRSHLTMFSVQLCNAMATGGGMGYKHTDYFVIGKYMPIHGPCWPHQGPYIAWLVEFRPCMRYEDLSMPIVSPRQNMCKNCKMLFKYKTNVVYFHSWLQEFTNIYDEIMPYKSCLVNAWLDND
IEQGLRTICNDEHHLLCPQRMCYKFSFIFERRYCSEFWGAKGSFQRSITYMPQDRRQHSIWSTKSRKKQQICNQSPVWTCWLMAILEMQLAMQKEGFEIYMTKDMMQGACYVHQNINENRIKFELAIH
DECVAQNNQNKEHDENAKGLYIRAGTAKEKEFTAKGYEQEWEAQNEHQYVHMGLCICIHCKGHFNGPTWFKESFFDVGIWGWFRDIEVWHNRNFPTHRARTVMGENSVAESWTFRDIYK
HIDSIGWQVDGFVAKHMVPTWLPQSLMHVCYWPKERPMWQQPSMDHDPWSYGPSWPRHYKIGMYRQCCTNNCYKFDVKEKTEDKDSANGKQIRNHDDAETFQMWYKPVSMRVLIMLQDWDLHLYTDFG""".split("\r\n")
    val spectrumData =
      """8287.68653
7020.09229
3459.5223
7007.1294
4555.27591
9587.55097
3351.58132
3858.949
10650.84973
9846.44745
5141.4244
1815.83576
8605.23163
7206.56081
4668.35997
10492.98265
4755.392
1276.70401
6500.04065
9575.27858
483.21177
562.22481
5713.8727
9150.1751
11292.46319
3406.56453
8086.92448
7006.48111
1650.68852
1458.61772
7142.36688
5345.34492
11044.1088
5232.26086
3425.5797
9613.65084
2525.31427
3588.56489
6071.91332
3209.4447
4266.86959
5550.50368
4697.1943
4636.23269
10216.87165
5987.99052
9708.59141
1025.53279
4468.24388
7120.21346
8788.0475
10282.88113
1956.89791
6517.14047
5239.52475
3356.51311
7934.65458
11850.64791
8178.77575
3038.38031
2570.08759
5810.44325
745.27074
6292.75869
3740.83479
1768.79258
8948.0975
9480.50376
10966.19615
11313.19969
8089.3476
9956.68837
338.13387
7044.18892
11113.26456
3023.50755
2893.51732
1311.54931
4135.8291
4868.47606
10931.02474
6211.75964
4961.13281
""".split("\r\n")
    val proteins = proteinData.tail.map((p: String) => new Protein(p)).toSet
    val spectrum = (spectrumData map (_ toFixedDecimal))

    val (protein, count) = findMatchingProtein(spectrum, proteins)
    expect(24) { count }
    expect("LIIQNRVADVGNYKGDLNRGVAWHNHCNSASPSNHSHFHHAGAEFKLEQMDCYIIETINGFCEVYSPTMSDEAMERFLVDQHHLHCNHLQLSISCWVLIIFPCFNKYNAMMCVPEHPKKAGDIMMILLARYK".toProtein) { protein }
  }

  test("SGRA: spectra graph with data from problem") {
    val data = """3524.8542
3623.5245
3710.9335
3841.974
3929.00603
3970.0326
4026.05879
4057.0646
4083.08025""".split("\r\n").map(_.toFixedDecimal)

    expect("WMSPG".toProtein) { Protein.inferFromMassSpectrum(data) }
  }

  test("SGRA: spectra graph with real data") {
    val data = """82.4425417892
85.1399424109
151.365112453
179.495301789
308.537891789
409.585571789
445.266686427
506.638331789
537.805354797
634.733291789
693.234097174
763.351234071
781.801701789
859.48148441
896.828641789
950.161497027
953.555619026
1011.85558179
1142.55452053
1142.89607179
1190.58941988
1205.26148785
1255.98013179
1358.75084573
1385.02272179
1400.311996
1502.16922044
1532.09113179
1647.11807179
1734.15010179
1829.36526669
1862.20868179
1888.2055964
1976.25161179
2123.32002179
2132.35272179
2175.6864314
2210.35205179
2220.32130456
2245.43678179
2267.17860528
2358.52084179
2373.41538179
2461.53003179
2486.49944179
2518.55149179
2589.50863179
2646.53009179
2646.64645179
2687.94072951
2754.13659426
2783.70536179
2802.63120179
2873.66831179
2882.77377179
2915.06457807
2942.57303871
3019.83268179
3029.76942179
3040.73274484
3120.88036179
3166.82833179
3247.01849958
3283.94369179
3303.88724179
3397.02775179
3404.93492179
3429.90565632
3491.96695179
3537.61402654
3583.10706179
3611.36663752
3655.03028179
3720.16597179
3783.08886179
3833.25003179
3886.09805179
3961.34499179
3983.36062061
3999.18211179
4007.92587136
4058.39775179
4130.04401287
4152.4803671
4171.48181179
4242.51892179
4337.51083915
4343.56660179
4506.62993179
4528.56727245
4569.62029526
4603.68269179
4717.72562179""".split("\r\n").map(_.toFixedDecimal)

    expect("PETPKFDDMIEFDSQNRIICGKHVHTYIWHIKPIATYPN".toProtein) { Protein.inferFromMassSpectrum(data) }
  }

}