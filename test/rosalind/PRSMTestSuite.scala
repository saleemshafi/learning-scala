package rosalind

import org.scalatest.FunSuite
import rosalind.PRSM._
import scala.collection.mutable.Stack
import scala.math.BigDecimal.RoundingMode
 
class PRSMTestSuite extends FunSuite {
  test("matching a spectrum to a protein with data from problem") {
    val proteinData =
"""4
IASWMQS
GSDMQS
VWICN
PVSMGAD""".split("\r\n")
    val spectrumData =
"""445.17838
115.02694
186.07931
314.13789
317.1198
215.09061
""".split("\r\n")
    val proteins = proteinData.tail.take(proteinData.head.toInt).toSet
    val spectrum = (spectrumData map (a => BigDecimal.apply(a).setScale(5, RoundingMode.HALF_UP)))
    
    val (protein, count) = getMatchingProtein(proteins, spectrum)
    expect(("IASWMQS", 3)) { (protein, count) }
  }

  test("matching a spectrum to a protein with real data set") {
    val proteinData =
"""20
LAGKLHSHGCRWTCDFALNCTAGFQVKGYWVYTAIRLKIVMMEQDAESHEYTFPLSCDPVRVWDADTPTMESHIALAENIQTQCCIMRGWCNNLPSMENIQVQLSSMEMPIGNGKERDE
VKFCQHGSAASSNHIRKHGHAYVAKGWSLVWWEYFWRIEICFEVFKNTKTQFNMYGEWHDNLNWMRNHPTRFMPPGIDLQWIEVGASHTNKSIAHVCKVGHSNFKWVGHPWYGCMVRVEFCHHVDFRRMWGYDWDKMLSFIKM
NWVCLKNEIFMIAVYLYCPSQWFERFGSNCSLCWIDIQEHENRHRWSLQFHDNYYVADTITHKPVCQEIGAHLILECWWGRWKIQDRAKPMLECVYRMILCVAYFKSKPDSMAAWCRRGEGAPPWEA
AMWTCQVVQHLGPYQECTIWHYQNKLCQGSGGVSFHYVMNAAAHYCDQSASEVQITMQEYKGPVEHHIDFCMYDAEWGINNGFRVFRMHEYHKQDNTRVIIQDSLGGSMDGDWPVHNYYRISTAHRTLFGGDKPFH
LIIQNRVADVGNYKGDLNRGVAWHNHCNSASPSNHSHFHHAGAEFKLEQMDCYIIETINGFCEVYSPTMSDEAMERFLVDQHHLHCNHLQLSISCWVLIIFPCFNKYNAMMCVPEHPKKAGDIMMILLARYK
CRANRIGLELQDCVKHAPGWIWVFWLGFYPRPYSYKCRNFHEPIEATRNMIISSMRLNSTCHPNSDFYQYHSTSRTPMHKGYMLGYDGPKDRDSLLKLVYIKYHCRMAFWKALSYWAYPRRWDDSTNCVFMGRIGWP
THDNKHTIQEYPEHQYSSLGYFYLYAIKTENEIGHRHVMQPAFDLVDGAQRRKWFLFLTKCQDVRMDAYPYPKRGSQLGDSEVICYTQGNSTHMKHEGMDHQTILKDSEWGMIRAFNKGIDDTKKRESWQISF
DAYRLCEHNDYKVIRATVVMARQSWARICCMTGKWVGTERIFSNIKMAYRRVGPWYCTYFDLLEAMYKNTNVASIEIEINLTAPATQLDVPGETYVGHTMQHACYLLSETSIMHVSVKKRIDSMTAERWWFDGISR
SQEGMADHIITQSFNIQEDPEMCHNYVMMEKINCKHECIQQFDVDRGCTHSQTCLARVCNCRECDIQYLQWCGEDAIGGWLRLSTYSEKMDLILPNMREDVWTRRLCCANWVNSFLAEYHGAQVTQCHHQF
SGVVASGSKLIGKNPWADGAHAVGIHNRTCPAWHMFGVIGKQNVPYAMMNGANFNIGSLNCHVKNITVLAIWISYQEPIAAPAESYPGPWPAVFFHNNWAQALLSQQGISLIINTAARIPKKQDGPW
EHEHNPVVYQPMFDELEPSKKCFRVNEANPWWMCSYSMVNRTLCHWRMAEYICCCHESEYFNFNQHTFRNWMYEFTITVTWACANVANPYNYCCATSTTMYAQIDYSICFCTFLPHWKASNTEGTTIQFHRAYGSYASSN
VRKDYDNYRHFRGSVYASENASSDKRVAAPEALPFTVQTASLWACWSYEDYGEYIMPSSDFCRQELFWQINTTNFKPPNIIVMKKDWHPHGGCTCPSDFDIGCICFVANFTFPCTVMGHE
CKCEVTQGMIYRGSPQGLVIGIGKCIDFNHCWIRAFVERWCIALKNPARYDSRSCRVFGMLFNFEKMNDSVKCPLTSLNSLAGLSWQRCNQKEDGANAHPAAYHCKPFDQEYVIKTA
LPFNTKQSVLFRVDWKVDRILQAIATCTISDVMIWVQSHYSLNGYSTVCAEAMWQGRGNTFHWWMKFVPQARYCAFLNTDMRPRREDETFTLSFWMEHTWNHWPWFMWVCFRSAMQPPKEILRYSTLFLGEWWED
CYEPAIVSCVSFFKDHADFLYMMSSSNTFARGKDMWRKGPTNREIFYVGCMCKCSACRGMAFKMACLVHGTHAWIWDVQFPCLKKILVNIAMAGQAWKLNLKRMQYTVEYDNVGTGKFTMVKAGGIEDMTVCIPMFHTL
HGYWLSLIMGEKTGKDCIEGLYSYLHYCVIWCGFHLWTVQQYFIQHQIHIQRMSIGQYVVNVYTMPYKRNFPFRRGCDMQFWYAVSLLFDKCTADSFILGKMALWIGVSDFRHQEPTTMEIL
KSDKCPHKQFYYSCDTSIFKRSHLTMFSVQLCNAMATGGGMGYKHTDYFVIGKYMPIHGPCWPHQGPYIAWLVEFRPCMRYEDLSMPIVSPRQNMCKNCKMLFKYKTNVVYFHSWLQEFTNIYDEIMPYKSCLVNAWLDND
IEQGLRTICNDEHHLLCPQRMCYKFSFIFERRYCSEFWGAKGSFQRSITYMPQDRRQHSIWSTKSRKKQQICNQSPVWTCWLMAILEMQLAMQKEGFEIYMTKDMMQGACYVHQNINENRIKFELAIH
DECVAQNNQNKEHDENAKGLYIRAGTAKEKEFTAKGYEQEWEAQNEHQYVHMGLCICIHCKGHFNGPTWFKESFFDVGIWGWFRDIEVWHNRNFPTHRARTVMGENSVAESWTFRDIYK
HIDSIGWQVDGFVAKHMVPTWLPQSLMHVCYWPKERPMWQQPSMDHDPWSYGPSWPRHYKIGMYRQCCTNNCYKFDVKEKTEDKDSANGKQIRNHDDAETFQMWYKPVSMRVLIMLQDWDLHLYTDFG""".split("\r\n")
    val spectrumData =
"""8287.68653
7020.09229
3459.5223
7007.1294
4555.27591
9587.55097
3351.58132
3858.949
10650.84973
9846.44745
5141.4244
1815.83576
8605.23163
7206.56081
4668.35997
10492.98265
4755.392
1276.70401
6500.04065
9575.27858
483.21177
562.22481
5713.8727
9150.1751
11292.46319
3406.56453
8086.92448
7006.48111
1650.68852
1458.61772
7142.36688
5345.34492
11044.1088
5232.26086
3425.5797
9613.65084
2525.31427
3588.56489
6071.91332
3209.4447
4266.86959
5550.50368
4697.1943
4636.23269
10216.87165
5987.99052
9708.59141
1025.53279
4468.24388
7120.21346
8788.0475
10282.88113
1956.89791
6517.14047
5239.52475
3356.51311
7934.65458
11850.64791
8178.77575
3038.38031
2570.08759
5810.44325
745.27074
6292.75869
3740.83479
1768.79258
8948.0975
9480.50376
10966.19615
11313.19969
8089.3476
9956.68837
338.13387
7044.18892
11113.26456
3023.50755
2893.51732
1311.54931
4135.8291
4868.47606
10931.02474
6211.75964
4961.13281
""".split("\r\n")
    val proteins = proteinData.tail.take(proteinData.head.toInt).toSet
    val spectrum = (spectrumData map (a => BigDecimal.apply(a).setScale(5, RoundingMode.HALF_UP)))
    
    val (protein, count) = getMatchingProtein(proteins, spectrum)
    expect(24) { count }
    expect("LIIQNRVADVGNYKGDLNRGVAWHNHCNSASPSNHSHFHHAGAEFKLEQMDCYIIETINGFCEVYSPTMSDEAMERFLVDQHHLHCNHLQLSISCWVLIIFPCFNKYNAMMCVPEHPKKAGDIMMILLARYK") { protein }
  }

}