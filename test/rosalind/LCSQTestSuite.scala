package rosalind

import org.scalatest.FunSuite

import rosalind.LIA._
import scala.math.BigDecimal.RoundingMode

class LCSQTestSuite extends FunSuite with RosalindProblem {
  
  def longestCommonSubsequence[T](a: Seq[T], b: Seq[T]): Seq[T] = (a, b) match {
    case (Nil, _) | (_, Nil) => Nil
    case _ => 
      if (a.head == b.head)
    	  a.head +: longestCommonSubsequence(a.tail, b.tail)
      else {
        val longestFromA = longestCommonSubsequence(a, b.view.tail.dropWhile( _ != a.head))
        val longestFromB = longestCommonSubsequence(a.view.tail.dropWhile(_ != b.head), b)
        List(longestFromA, longestFromB) maxBy (_.length)
      }
  }
  
  
  test("longest common subsequence with data from problem") {
    val a = "AACCTTGG"
    val b = "ACACTGTGA"
    val seq = longestCommonSubsequence(a, b)
    println(seq)
    expect(6) { seq.length }
  }
  
  test("longest common subsequence with real data") {
    val a = "GTGCGCGACTACTGCCCGACTGCAGCCACTTCACGCTGAAACTTTCACCCACGGAACAATGTGCTAATTACCGAGTGTAGCACTGGCAATCCATACTTTGCCGAATGGTACAGTCAGCCGGCTATGTCCTCGTGATGCCAAAGTCGAAGCGCATTCAACCAAACTGGGTTCGATCTCCCGCGAGGCGCCAATCGAGCATAATAACATATGATTGAGCGGGTAACCGTAGCGACAAGCTGCCGCAACACAGTCCGTCTTTTTAGGACCGGGTAGCTTGAACTTACATCGTTAGAGGGGAGATGATTTCGTGCCCAGTCCCTGCGCTCCCTCATAAAACAATTCCGGACAGAGGCTTGTGCTACTTATTGCTCGGCCGGCTAGAGCGAAAAGTATCAGTTTGCGACCCACAAACGCGCATATTGTAAAGTAGGAACGCTGTAAAACTCTGGATTTAGCCGCTACTGCACAGCTGCCGGGGGCCTGAGATTTTTGGAGCCCTTCCAGAGCCAGGACCACCTATCGATTGCCTCGAGAGGGTAGAACTGGAGCGTAGTTTTTGGTGGGCTGAGAGTATTGGGGACAATACCTCTTGTAATTTGATGTGATGTGGTGGCTTCCAATGCGGGACCTAAACTGCTGGATATGGTGTCAGTCGGTATCGACTCGCGCAAAAAATAGAGTTAACGCAGCTATTGATCTTAAAACGTATTATTCCGTTCTGTTGACCCACACGTGTGCATTTAAAGAACGCCGACAATCCCGAACTCTGCTGCTGCATGCGAGGTGCGTCCTTGACCATCCATTATACCCTTCAACGATATTTGTACCTATGCCAGAGATAACCAGCACACAGGTCTGCCACAGTGGGAGTGTAGGGGTCAGAGGCACGAAGGTATTCCCCGCTTTCTGATATCTAGGAATTGAACGCGACGTAGCCGCTGCTCGGAGCGAAAAAGTAATAGGCTGTGGTCTAACCCGAAGCGCATAGGATTGGC"
    val b = "CGGACTTGTTGGGAACCGACGACATGCGAACCTAATCCCGGCTACGTTTCTCCCATCGGATTGAGGTAGCTCGAGTCACTCTTTTCTCGCCCTCAAAAGTTCGCGATTTCACCGCTATGTGCGCAATACCTCGCACAAGCCATAGCCACTGTACGTAGAATCAGCTTGCGGACCCAAATATTGATGGACTCTCACATGCGCAGTTTCCAACGGCCAGACACTCCCGTCTGGGCAGGAAGAGTTTAGCGGTGCTGGGATGGTCTACGAATTGAACATCGAAGGGTCCTTGCGACATGGTCGCAGTTTTACGCCTTCCGCATTACCGAAACTTTCGTTATCACCTCACCCCAATACACCAGCCCCATGGAGAAACGCTGGGGAGGGATACGCCCGGGGGCAAACCAAGAAGTCCTATACCAAGATTCCCCGTAAGGCTGACTCACTTAAAAACTCTGATACGGGGGGGTGACGTGTCGCCAGCCCCAGTGAGGGTGTTAACATACACGGCCCAGGCATGATCAGCGCTGGGCGCGCCCACTGTGTTTACTTCTTAAGAATTGCAGACATGATGCTGGGGCCTTACTTGTCGTGCCTAACCACGGTAGCGTTAGAGAAATAAATGATATGGCACCTTGAGGCATACAGGCTAGCCCCCTTGGACCCTAAGCCGACTAGGTACGGTGCTGCTGAAGGCAGAGACTTTTGCGTGGGGCGGTGTTGCAGGACTCGGTACAGGTCGACAGCGCCTAAGTACTTCACATGCCCACCCAGGAGTATTATGTATGTTTGCCTTGTTCAGTGGATCGTGCTGAACGTGCGAGTTCTTTCGTTGTGGCCTCTGTGCGTTGAAAGCCAACGCGTCCGCATTATCTCTGACACCGTTACACGGAGCCGTACTATGCCGACTGCTCCTG"
    println (longestCommonSubsequence(a, b).mkString)
    //expect("") { longestCommonSubsequence(a, b).mkString }
  }
  
}